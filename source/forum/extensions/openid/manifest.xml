<?xml version="1.0" encoding="UTF-8"?>
<extension engine="1.0">
	<id>openid</id>
	<title>OpenID</title>
	<version>1.1.0</version>
	<description>Provides support for OpenID-based registration and login.</description>
	<author>Alexander Steffen</author>
	<minversion>1.3.0</minversion>
	<maxtestedon>1.3.4</maxtestedon>

	<note type="install" timing="pre">WARNING: your web-server should have write access to FORUM_ROOT/extensions/openid/oid_store/.</note>

	<install><![CDATA[
require FORUM_ROOT.'extensions/'.$id.'/include/common.php';
$path = FORUM_ROOT.implode(DIRECTORY_SEPARATOR, array('extensions', $id, 'oid_store', ''));

if (!file_exists($path) && !mkdir($path, 0700))
{
	message(sprintf($lang_openid['Error inexistent directory'], $path));
}
elseif (!is_dir($path))
{
	message(sprintf($lang_openid['Error not a directory'], $path));
}
elseif (!is_writable($path))
{
	message(sprintf($lang_openid['Error not writable'], $path));
}

if (!$forum_db->table_exists('openid_map'))
{
	$openid_schema = array(
		'FIELDS'		=> array(
			'openid'			=> array(
				'datatype'		=> 'VARCHAR(255)',
				'allow_null'	=> false
			),
			'userid'			=> array(
				'datatype'		=> 'INT(10) UNSIGNED',
				'allow_null'	=> false
			),
		),
		'PRIMARY KEY'	=> array('openid'),
	);

	$forum_db->create_table('openid_map', $openid_schema);
}

if (defined('EXT_CUR_VERSION') && version_compare(EXT_CUR_VERSION, '1.1', '<'))
{
	// upgrade from 1.0.x
	// transform stored identifiers to claimed identifiers
	$openid_query = array(
		'SELECT'	=> 'openid',
		'FROM'		=> 'openid_map'
	);

	$openid_result = $forum_db->query_build($openid_query) or error(__FILE__, __LINE__);
	$openid_handler = new Ext_PunBB_OpenIDHandler('unused');

	while ($openid_data = $forum_db->fetch_assoc($openid_result))
	{
		$openid_handler->setIdentifier($openid_data['openid']);

		if ($openid_handler->getLastError())
		{
			$notices[] = $openid_handler->getLastError();
		}
		else
		{
			$openid_query = array(
				'UPDATE'	=> 'openid_map',
				'SET'		=> 'openid = \''.$forum_db->escape($openid_handler->getClaimedIdentifier()).'\'',
				'WHERE'		=> 'openid = \''.$forum_db->escape($openid_data['openid']).'\''
			);
			$forum_db->query_build($openid_query) or error(__FILE__, __LINE__);
		}
	}
}
	]]></install>
	<uninstall><![CDATA[
$forum_db->drop_table('openid_map');
	]]></uninstall>

	<hooks>
		<!-- admin/users.php -->
		<hook id="aus_find_user_selected"><![CDATA[
// if user searches for OpenIDs, make sure the following code does not complain about missing search terms
// changes done here are undone later (required because of missing hooks)
$openid_admin_note_changed = false;
if (forum_trim($_POST['openid']) != '' && forum_trim($form['admin_note']) == '')
{
	$form['admin_note'] = 'openid';
	$openid_admin_note_changed = true;
}
		]]></hook>
		<hook id="aus_find_user_qr_find_users"><![CDATA[
// undo changes
if ($openid_admin_note_changed)
{
	$query['WHERE'] = str_replace(' AND u.'.$forum_db->escape('admin_note').' '.$like_command.' \''.$forum_db->escape('openid').'\'', '', $query['WHERE']);
}

// extend query to search for OpenIDs
$openid_search = forum_trim($_POST['openid']);
if ($openid_search != '')
{
	$query['SELECT'] = 'DISTINCT '.$query['SELECT'];
	$query['JOINS'][] = array(
		'LEFT JOIN'	=> 'openid_map AS o',
		'ON'		=> 'o.userid=u.id'
	);
	$query['WHERE'] .= ' AND o.openid '.$like_command.' \''.$forum_db->escape(str_replace('*', '%', $openid_search)).'\'';
}
		]]></hook>
		<hook id="aus_find_user_pre_header_load"><![CDATA[
// prefetch OpenIDs of all users in result set
if ($forum_page['num_users'] > 0)
{
	$openid_query = array(
		'SELECT'	=> 'u.id, o.openid',
		'FROM'		=> 'openid_map AS o',
		'JOINS'		=> array(
			array(
				'INNER JOIN'	=> 'users AS u',
				'ON'			=> 'u.id=o.userid'
			)
		),
		'WHERE'		=> $query['WHERE']
	);

	$openid_result = $forum_db->query_build($openid_query) or error(__FILE__, __LINE__);
	$openid_usermap = array();
	while ($openid_data = $forum_db->fetch_assoc($openid_result))
	{
		$openid_usermap[$openid_data['id']][] = $openid_data['openid'];
	}
}
		]]></hook>
		<hook id="aus_find_user_pre_row_output"><![CDATA[
// display users OpenIDs (if any)
if (isset($openid_usermap[$user_data['id']]))
{
	require_once $ext_info['path'].'/include/common.php';

	$openid_list = '';
	foreach ($openid_usermap[$user_data['id']] as $openid_key => $openid_id)
	{
		if ($openid_key) $openid_list .= ', ';
		$openid_list .= '<a href="'.forum_htmlencode($openid_id).'">'.forum_htmlencode($openid_id).'</a>';
	}

	$forum_page['table_row']['username'] = preg_replace('(.*</a></span>.*</a></span>)', '$0<span>'.$lang_openid['OpenID'].' '.$openid_list.'</span>', $forum_page['table_row']['username']);
}
		]]></hook>
		<hook id="aus_search_form_pre_user_title"><![CDATA[
// display OpenID search input field
require_once $ext_info['path'].'/include/common.php';
?>
 				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">
 					<div class="sf-box text">
						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_openid['OpenID']; ?></span></label><br />
						<span class="fld-input"><input type="text" id="fld<?php echo $forum_page['fld_count'] ?>" name="openid" size="30" maxlength="50" /></span>
					</div>
				</div>
<?php
		]]></hook>


		<!-- common/functions.php -->
		<hook id="fn_csrf_confirm_form_start"><![CDATA[
// do not display form, if this is an OpenID request
require_once $ext_info['path'].'/include/common.php';
if (Ext_PunBB_OpenIDHandler::isCompleteRequest())
{
	if (isset($_GET['csrf_token']) && $_GET['csrf_token'] == generate_form_token('openid'))
	{
		return true;
	}
	else
	{
		message($lang_common['Bad request']);
	}
}
		]]></hook>
		<hook id="fn_add_user_qr_insert_user"><![CDATA[
// save additional attributes requested via OpenID extensions
$openid_additional_info = array('realname', 'location', 'url', 'aim', 'icq', 'msn', 'yahoo', 'jabber');
foreach ($openid_additional_info as $openid_additional_field)
{
	if 	(isset($user_info[$openid_additional_field]))
	{
		$query['INSERT'] .= ', '.$openid_additional_field;
		$query['VALUES'] .= ', \''.$forum_db->escape($user_info[$openid_additional_field]).'\'';
	}
}
		]]></hook>
		<hook id="fn_delete_user_qr_delete_user"><![CDATA[
$openid_query = array(
	'DELETE'	=> 'openid_map',
	'WHERE'		=> 'userid = \''.$forum_db->escape($user_id).'\''
);
$forum_db->query_build($openid_query) or error(__FILE__, __LINE__);
		]]></hook>


		<!-- login.php -->
		<hook id="li_start"><![CDATA[
// basic OpenID login handling
require_once $ext_info['path'].'/include/common.php';

// check for OpenID request and handle it
$openid_handler = new Ext_PunBB_OpenIDHandler(forum_link($forum_url['login']));

if ($openid_handler->isBeginRequest())
{
	if ($openid_handler->getUserData()->isKnownUser())
	{
		// save request and begin login
		$openid_handler->getRequestStorage()->saveList(array('_POST' => array('form_sent', 'redirect_url', 'req_username', 'req_password', 'save_pass')));
		$openid_handler->redirect();
	}
	else
	{
		// request attributes from new user and begin registration
		$openid_handler->setRequestAttributes(true);
		$openid_handler->redirect(forum_link($forum_url['register']));
	}
}

$openid_errors = $openid_handler->getLastErrorList();
		]]></hook>
		<hook id="li_login_pre_auth_message"><![CDATA[
if (!$authorized)
{
	// if user was not authorized by username/password, check if he is authorized by OpenID
	if ($openid_handler->isSuccessRequest() && $openid_handler->getUserData()->isKnownUser())
	{
		// log in using OpenID
		$authorized = true;
		$user_id = $openid_handler->getUserData()->id;
		$group_id = $openid_handler->getUserData()->group_id;
		$form_password_hash = $openid_handler->getUserData()->password;
		$salt = $openid_handler->getUserData()->salt;
	}

	if (!empty($openid_errors))
	{
		if ($_POST['req_username'] != '' || $_POST['req_password'] != '')
		{
			$errors = array_merge($errors, $openid_errors);
		}
		else
		{
			// display OpenID related errors
			$errors = $openid_errors;

			// do not add additional error message
			$authorized = true;
		}

		unset($openid_errors);
	}
}
		]]></hook>
		<hook id="li_login_output_start"><![CDATA[
// add error messages (if any)
if (isset($openid_errors))
{
	$errors = array_merge($errors, $openid_errors);
}

// prevent JS form validator from checking fields that are not required anymore
?>
<script type="text/javascript">
Forum.validateForm = function()
{
        return true;
}
</script>
<?php
		]]></hook>
		<hook id="li_login_pre_login_group"><![CDATA[
// display notice explaining login choices (traditional username/password or OpenID)
if (!isset($_POST['form_sent']))
{
?>
			<div class="ct-box info-box">
				<p><?php echo $lang_openid['OpenID login']; ?></p>
			</div>
<?php
}

// display OpenID input field
?>
			<div class="frm-group group<?php echo ++$forum_page['group_count'] ?>">
				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">
					<div class="sf-box text">
						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_openid['OpenID']; ?></span></label><br />
						<span class="fld-input"><input type="text" id="fld<?php echo $forum_page['fld_count'] ?>" name="openid_identifier" value="<?php if (isset($_POST['openid_identifier'])) echo forum_htmlencode($_POST['openid_identifier']); ?>" size="35" /></span>
					</div>
				</div>
			</div>
<?php
	]]></hook>
		<hook id="li_end"><![CDATA[
// remove 'required' from form fields
openid_remove_required_notice(array($lang_login['Username'], $lang_login['Password']));
		]]></hook>


		<!-- profile.php -->
		<hook id="pf_start"><![CDATA[
// basic OpenID profile information handling
require_once $ext_info['path'].'/include/common.php';

// check for OpenID request and handle it
$openid_handler = new Ext_PunBB_OpenIDHandler(forum_link($forum_url['user'], $forum_user['id']));
		]]></hook>
		<hook id="pf_qr_get_user_info"><![CDATA[
// prefetch list of OpenIDs associated with current user account
$openid_query = array(
	'SELECT'	=> 'openid',
	'FROM'		=> 'openid_map',
	'WHERE'		=> 'userid = '.$forum_db->escape($id)
);
$openid_result = $forum_db->query_build($openid_query) or error(__FILE__, __LINE__);
$openid_list = array();
while ($openid_data = $forum_db->fetch_assoc($openid_result))
{
	$openid_list[] = $openid_data['openid'];
}

// generate input field for user to select his OpenID
function openid_generate_input_field($selected_identifier, $list, $field_number, $size, $hidden=false)
{
	$field = '';

	if (count($list) > 1)
	{
		$field = '<select id="fld'.$field_number.'" name="openid_identifier">';
		foreach ($list as $identifier)
		{
			$field .= '<option value="'.forum_htmlencode($identifier).'"'.($identifier == $selected_identifier ? ' selected="selected"' : '').'>'.forum_htmlencode($identifier).'</option>';
		}
		$field .= '</select>';
	}
	elseif (count($list) == 1)
	{
		$field = '<input type="'.($hidden?'hidden':'text').'" id="fld'.$field_number.'" name="openid_identifier" value="'.forum_htmlencode(array_shift($list)).'" size="'.$size.'" readonly="readonly"/>';
	}

	return $field;
}
		]]></hook>
		<hook id="pf_change_pass_selected"><![CDATA[
if ($openid_handler->getRequestStatus() == Ext_PunBB_OpenIDHandler::REQUEST_STATUS_CANCEL)
{
	$_POST['cancel'] = '1';
}
		]]></hook>
		<hook id="pf_change_pass_normal_form_submitted"><![CDATA[
// authenticate using OpenID instead of password
if ((!isset($_POST['req_old_password']) || $_POST['req_old_password'] == '') && $forum_user['id'] == $id && !empty($openid_list) && in_array($openid_handler->getClaimedIdentifier(), $openid_list) && !$forum_user['is_admmod'])
{
	$new_password1 = forum_trim($_POST['req_new_password1']);
	$new_password2 = forum_trim($_POST['req_new_password2']);
	$openid_more_errors = (utf8_strlen($new_password1) < 4 || $new_password1 != $new_password2);

	if (!isset($openid_selected_identifier))
	{
		$openid_selected_identifier = $openid_handler->getClaimedIdentifier();
	}

	if (!$openid_more_errors)
	{
		if ($openid_handler->isBeginRequest())
		{
			$openid_handler->getRequestStorage()->saveList(array('_POST'=>array('form_sent', 'req_new_password1', 'req_new_password2'), array('openid_selected_identifier')));
			$openid_handler->redirect(forum_link($forum_url['change_password'], $id));
		}

		$errors = $openid_handler->getLastErrorList();
	}

	if ($openid_more_errors || !empty($errors) || $openid_handler->isSuccessRequest())
	{
		// prevent password error (user wants to authenticate using OpenID)
		$openid_backup_is_admmod = $forum_user['is_admmod'];
		$forum_user['is_admmod'] = true;
	}
	elseif ($openid_handler->getRequestStatus() == Ext_PunBB_OpenIDHandler::REQUEST_STATUS_CANCEL)
	{
		$_POST['cancel'] = '1';
	}
}
		]]></hook>
		<hook id="pf_change_pass_normal_pre_header_load"><![CDATA[
// restore backup value (if any)
if (isset($openid_backup_is_admmod))
{
	$forum_user['is_admmod'] = $openid_backup_is_admmod;
}
		]]></hook>
		<hook id="pf_change_pass_normal_output_start"><![CDATA[
// prevent JS form validator from checking fields that are not required anymore
if (!$forum_user['is_admmod'])
{
?>
<script type="text/javascript" src="<?php echo $ext_info['path'].'/include/js/validateForm.js'; ?>"></script>
<script type="text/javascript">
openid_match = function(x)
{
	return x.name && x.name == 'req_old_password';
}
</script>
<?php
}
		]]></hook>
		<hook id="pf_change_pass_normal_pre_fieldset"><![CDATA[
// display notice explaining authentication choices (old password or OpenID)
if (!$forum_user['is_admmod'] && $forum_page['own_profile'] && !empty($openid_list))
{
	if (!isset($_POST['form_sent']))
	{
?>
			<div class="ct-box info-box">
				<p><?php echo $lang_openid['OpenID password change']; ?></p>
			</div>
<?php
	}
	$lang_profile['Old password help'] = '';
}
		]]></hook>
		<hook id="pf_change_pass_normal_pre_old_password"><![CDATA[
// display OpenID input field
if (!$forum_user['is_admmod'] && $forum_page['own_profile'] && !empty($openid_list))
{
?>
				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">
					<div class="sf-box text">
						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_openid['OpenID']; ?></span></label><br />
						<span class="fld-input"><?php echo openid_generate_input_field(isset($openid_selected_identifier) ? $openid_selected_identifier : '',$openid_list, $forum_page['fld_count'], 35); ?></span><br />
					</div>
				</div>
<?php
}
		]]></hook>
		<hook id="pf_change_pass_normal_end"><![CDATA[
// remove 'required' from form fields
if (!$forum_user['is_admmod'] && $forum_page['own_profile'] && !empty($openid_list))
{
	openid_remove_required_notice(array($lang_profile['Old password']));
}
		]]></hook>
		<hook id="pf_change_email_selected"><![CDATA[
if ($openid_handler->getRequestStatus() == Ext_PunBB_OpenIDHandler::REQUEST_STATUS_CANCEL)
{
	$_POST['cancel'] = '1';
}
		]]></hook>
		<hook id="pf_change_email_normal_qr_check_email_dupe"><![CDATA[
// authenticate using OpenID instead of password
if ((!isset($_POST['req_password']) || $_POST['req_password'] == '') && $forum_user['id'] == $id && !empty($openid_list) && in_array($openid_handler->getClaimedIdentifier(), $openid_list))
{
	$openid_result = $forum_db->query_build($query) or error(__FILE__, __LINE__);
	$openid_more_errors = (count($errors) > 1 || ($forum_db->num_rows($openid_result) && $forum_config['p_allow_dupe_email'] == '0'));

	if (!isset($openid_selected_identifier))
	{
		$openid_selected_identifier = $openid_handler->getClaimedIdentifier();
	}

	if (!$openid_more_errors)
	{
		if ($openid_handler->isBeginRequest())
		{
			$openid_handler->getRequestStorage()->saveList(array('_POST'=>array('form_sent', 'req_new_email', 'req_password'), array('openid_selected_identifier')));
			$openid_handler->redirect(forum_link($forum_url['change_email'], $id));
		}

		$errors = $openid_handler->getLastErrorList();
	}

	if ($openid_more_errors || !empty($errors) || $openid_handler->isSuccessRequest())
	{
		// remove password error (user wants to authenticate using OpenID)
		$openid_error_index = array_search($lang_profile['Wrong password'], $errors);
		if ($openid_error_index !== false) unset($errors[$openid_error_index]);
	}
}
		]]></hook>
		<hook id="pf_change_email_normal_output_start"><![CDATA[
// prevent JS form validator from checking fields that are not required anymore
?>
<script type="text/javascript" src="<?php echo $ext_info['path'].'/include/js/validateForm.js'; ?>"></script>
<script type="text/javascript">
openid_match = function(x)
{
	return x.name && x.name == 'req_password';
}
</script>
<?php
		]]></hook>
		<hook id="pf_change_email_normal_pre_fieldset"><![CDATA[
// display notice explaining authentication choices (old password or OpenID)
if ($forum_page['own_profile'] && !empty($openid_list) && !isset($_POST['form_sent']))
{
?>
			<div class="ct-box info-box">
				<p><?php echo $lang_openid['OpenID email change']; ?></p>
			</div>
<?php
}
		]]></hook>
		<hook id="pf_change_email_normal_pre_password"><![CDATA[
// display OpenID input field
if ($forum_page['own_profile'] && !empty($openid_list))
{
?>
				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">
					<div class="sf-box text">
						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_openid['OpenID']; ?></span></label><br />
						<span class="fld-input"><?php echo openid_generate_input_field(isset($openid_selected_identifier) ? $openid_selected_identifier : '', $openid_list, $forum_page['fld_count'], 25); ?></span><br />
					</div>
				</div>
<?php
}
		]]></hook>
		<hook id="pf_change_email_normal_end"><![CDATA[
// remove 'required' from form fields
if ($forum_page['own_profile'] && !empty($openid_list))
{
	openid_remove_required_notice(array($lang_profile['Password']));
}
		]]></hook>
		<hook id="pf_change_details_form_submitted"><![CDATA[
if ($openid_handler->getRequestStatus() == Ext_PunBB_OpenIDHandler::REQUEST_STATUS_CANCEL)
{
	$openid_backup_section = $section;
	$section = '';
}
		]]></hook>
		<hook id="pf_change_details_identity_validation"><![CDATA[
// request identity details using OpenID
if (isset($_POST['openid_update_data']) && $forum_user['id'] == $id && !empty($openid_list) && in_array($openid_handler->getClaimedIdentifier(), $openid_list))
{
	if (!isset($openid_selected_identifier))
	{
		$openid_selected_identifier = $openid_handler->getClaimedIdentifier();
	}

	if ($openid_handler->isBeginRequest())
	{
		$openid_handler->getRequestStorage()->saveList(array('_POST'=>array('form_sent', 'openid_update_data', 'form', 'req_username', 'old_username', 'req_email', 'title', 'num_posts', 'admin_note'), array('openid_selected_identifier')));
		$openid_handler->setRequestAttributes(true);
		$openid_handler->redirect(forum_link($forum_url['profile_identity'], $id));
	}
	elseif ($openid_handler->isSuccessRequest())
	{
		// authentication successful
		$form = array_intersect_key($openid_handler->getUserData()->getData(), array_flip(array('realname', 'url', 'location', 'jabber', 'icq', 'msn', 'aim', 'yahoo')));
	}

	$errors = $openid_handler->getLastErrorList();
}
		]]></hook>
		<hook id="pf_change_details_pre_database_validation"><![CDATA[
// restore $section
if (isset($openid_backup_section))
{
	$section = $openid_backup_section;
}

// skip errors in following code if $form is not set
if (!isset($form))
{
	$skip_db_update_sections[] = $section;
}
		]]></hook>
		<hook id="pf_change_details_modify_main_menu"><![CDATA[
// add additional section for OpenID to menu
$forum_page['main_menu']['openid'] = '<li'.(($section == 'openid') ? ' class="active"' : '').'><a href="'.forum_link($forum_url['profile_openid'], $id).'"><span>'.$lang_openid['OpenID'].'</span></a></li>';
		]]></hook>
		<hook id="pf_change_details_about_pre_header_load"><![CDATA[
// list OpenIDs associated with user account on info page
if (!empty($openid_list) && ($forum_page['own_profile'] || $forum_user['is_admmod']))
{
	$openid_idlist = '';
	foreach ($openid_list as $openid_identifier)
	{
		if ($openid_idlist != '') $openid_idlist .= ', ';
		$openid_idlist .= '<a href="'.forum_htmlencode($openid_identifier).'">'.forum_htmlencode($openid_identifier).'</a>';
	}

	$forum_page['user_private']['openid']= '<li><span>'.$lang_openid['OpenID'].': '.$openid_idlist.'</span></li>';
}
		]]></hook>
		<hook id="pf_change_details_identity_contact_fieldset_end"><![CDATA[
// display OpenID input field
if ($forum_page['own_profile'] && !empty($openid_list))
{
?>
			<div class="frm-buttons">
				<span class="submit"><?php echo openid_generate_input_field(isset($openid_selected_identifier) ? $openid_selected_identifier : '', $openid_list, ++$forum_page['fld_count'], 0, true); ?><input type="submit" name="openid_update_data" value="<?php echo $lang_openid['OpenID update profile']; ?>" /> <?php echo $lang_openid['override data']; ?></span>
			</div>
<?php
}
		]]></hook>
		<hook id="pf_change_details_new_section"><![CDATA[
// handle all requests to new OpenID section
if ($section == 'openid')
{
	// same permissions apply as for password changes
	if ($forum_user['id'] != $id && $forum_user['g_id'] != FORUM_ADMIN && ($forum_user['g_moderator'] != '1' || $forum_user['g_mod_edit_users'] != '1' || $forum_user['g_mod_change_passwords'] != '1' || $user['g_id'] == FORUM_ADMIN || $user['g_moderator'] == '1'))
	{
		message($lang_common['No permission']);
	}

	if (isset($_POST['form_sent']))
	{
		if (!isset($openid_authenticated))
		{
			// admins and moderators do not need to authenticate
			$openid_authenticated = ($forum_user['g_id'] == FORUM_ADMIN || $forum_user['g_moderator'] == '1');
		}

		// password authentication
		if (!$openid_authenticated && ((isset($_POST['password']) && $_POST['password'] != '') || empty($openid_list)))
		{
			if (forum_hash($_POST['password'], $forum_user['salt']) === $forum_user['password'])
			{
				$openid_authenticated = true;
			}
			else
			{
				$errors[] = $lang_profile['Wrong password'];
			}
		}

		// do not permit authentication using the OpenID that is to be deleted
		// assures the user has at least one other way to log in thereafter
		if (!$openid_authenticated && empty($errors) && isset($_POST['openid_remove']) && array_key_exists($openid_handler->getClaimedIdentifier(), $_POST['openid_remove']))
		{
			$errors[] = $lang_openid['Choose another OpenID'];
		}

		if (empty($errors))
		{
			// if not already authenticated, try OpenID-based authentication
			if (!$openid_authenticated && in_array($openid_handler->getClaimedIdentifier(), $openid_list))
			{
				if (!isset($openid_selected_identifier))
				{
					$openid_selected_identifier = $openid_handler->getClaimedIdentifier();
				}

				if ($openid_handler->isBeginRequest())
				{
					$openid_handler->getRequestStorage()->saveList(array('_POST'=>array('form_sent', 'openid_new', 'openid_add', 'openid_remove'), array('openid_selected_identifier')));
					$openid_handler->redirect(forum_link($forum_url['profile_openid'], $id));
				}
				elseif ($openid_handler->isSuccessRequest())
				{
					// authentication succeeded
					$openid_authenticated = true;
				}
				
				$errors = $openid_handler->getLastErrorList();
			}

			// perform requested action if user is now authenticated
			if ($openid_authenticated)
			{
				if (isset($_POST['openid_add']) && isset($_POST['openid_new']))
				{
					if (!isset($openid_confirmed))
					{
						$openid_handler->setIdentifier($_POST['openid_new']);
					}

					if ($forum_user['g_id'] != FORUM_ADMIN && $forum_user['g_moderator'] != '1')
					{
						if (!isset($openid_confirmed))
						{
							$openid_confirmed = true;
							$openid_handler->getRequestStorage()->saveList(array('_POST'=>array('form_sent', 'openid_new', 'openid_add'), array('openid_authenticated', 'openid_confirmed', 'openid_selected_identifier')));
							$openid_handler->redirect(forum_link($forum_url['profile_openid'], $id));
						}
	
						$errors = $openid_handler->getLastErrorList();
					}

					if ($openid_handler->getUserData()->isKnownUser())
					{
						$errors[] = sprintf($lang_openid['Identifier already registered'], forum_htmlencode($openid_handler->getClaimedIdentifier()));
					}

					if (empty($errors) && ($forum_user['g_id'] == FORUM_ADMIN || $forum_user['g_moderator'] == '1' || $openid_handler->isSuccessRequest()))
					{
						// user has successfully authenticated the new OpenID
						// or is admin/moderator and may skip all checks
						// -> add new OpenID to account
						$openid_query = array(
							'INSERT'	=> 'openid, userid',
							'INTO'		=> 'openid_map',
							'VALUES'	=> '\''.$forum_db->escape($openid_handler->getClaimedIdentifier()).'\', \''.$forum_db->escape($id).'\''
						);
						$forum_db->query_build($openid_query) or error(__FILE__, __LINE__);
						$openid_list[] = $openid_handler->getClaimedIdentifier();
						unset($_POST['openid_new']);
					}
				}
				elseif (isset($_POST['openid_remove']))
				{
					// remove existing OpenID
					$openid_identifier = array_shift(array_keys($_POST['openid_remove']));
					if (in_array($openid_identifier, $openid_list))
					{
						$openid_query = array(
							'DELETE'	=> 'openid_map',
							'WHERE'		=> 'openid = \''.$forum_db->escape($openid_identifier).'\''
						);
						$forum_db->query_build($openid_query) or error(__FILE__, __LINE__);
						$openid_list = array_diff($openid_list, array($openid_identifier));
					}

				}
			}
		}
	}

	// Setup breadcrumbs
	$forum_page['crumbs'] = array(
		array($forum_config['o_board_title'], forum_link($forum_url['index'])),
		array(sprintf($lang_profile['Users profile'], $user['username']), forum_link($forum_url['user'], $id)),
		array($lang_openid['OpenID'], forum_link($forum_url['profile_openid'], $id))
	);

	// Setup the form
	$forum_page['group_count'] = $forum_page['item_count'] = $forum_page['fld_count'] = 0;
	$forum_page['form_action'] = forum_link($forum_url['profile_openid'], $id);
	$forum_page['own_profile'] = ($forum_user['id'] == $id) ? true : false;

	$forum_page['hidden_fields'] = array(
		'form_sent'		=> '<input type="hidden" name="form_sent" value="1" />',
		'csrf_token'	=> '<input type="hidden" name="csrf_token" value="'.generate_form_token($forum_page['form_action']).'" />'
	);

	define('FORUM_PAGE', 'profile-openid');
	require FORUM_ROOT.'header.php';

	// START SUBST - <!-- forum_main -->
	ob_start();
?>
	<div class="main-subhead">
		<h2 class="hn"><span><?php printf(($forum_page['own_profile']) ? $lang_openid['Manage your OpenIDs'] : $lang_openid['Manage user OpenIDs'], forum_htmlencode($user['username'])) ?></span></h2>
	</div>
	<div class="main-content main-frm">
<?php

// If there were any errors, show them
if (!empty($errors))
{
	$forum_page['errors'] = array();
	foreach ($errors as $cur_error)
		$forum_page['errors'][] = '<li class="warn"><span>'.$cur_error.'</span></li>';
?>
		<div class="ct-box error-box">
			<h2 class="warn hn"><?php echo $lang_profile['Profile update errors'] ?></h2>
			<ul class="error-list">
				<?php echo implode("\n\t\t\t\t", $forum_page['errors'])."\n" ?>
			</ul>
		</div>
<?php
}
?>
		<form class="frm-form" method="post" accept-charset="utf-8" action="<?php echo $forum_page['form_action'] ?>">
			<div class="hidden">
				<?php echo implode("\n\t\t\t\t", $forum_page['hidden_fields'])."\n" ?>
			</div>
<?php
if ($forum_page['own_profile'] && $forum_user['g_id'] != FORUM_ADMIN && $forum_user['g_moderator'] != '1')
{
?>
			<div class="ct-box info-box">
				<p><?php echo $lang_openid['OpenID manage']; ?></p>
			</div>
			<fieldset class="frm-group group<?php echo ++$forum_page['group_count'] ?>">
				<legend class="group-legend"><strong>Authentifikation</strong></legend>
				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?><?php echo ($forum_page['item_count'] == 1) ? ' mf-head' : ' mf-extra' ?>">
					<div class="sf-box text">
						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_profile['Password']; ?></span></label>
						<span class="fld-input"><input type="password" id="fld<?php echo $forum_page['fld_count'] ?>" name="password" size="25" /></span>
					</div>
<?php
if (!empty($openid_list))
{
?>
					<div class="sf-box text">
						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_openid['OpenID']; ?></span></label>
						<span class="fld-input"><?php echo openid_generate_input_field(isset($openid_selected_identifier) ? $openid_selected_identifier : '', $openid_list, $forum_page['fld_count'], 25); ?></span>
					</div>
<?php
}
?>
				</div>
			</fieldset>
<?php
}
?>
			<fieldset class="frm-group group<?php echo ++$forum_page['group_count'] ?>">
				<fieldset class="mf-set set<?php echo ++$forum_page['item_count'] ?><?php echo ($forum_page['item_count'] == 1) ? ' mf-head' : ' mf-extra' ?>">
					<legend><span><?php echo $lang_openid['New OpenID']; ?></span></legend>
					<div class="mf-box">
						<div class="mf-field mf-field1 text">
							<span class="fld-input"><input type="text" id="fld<?php echo ++$forum_page['fld_count'] ?>" name="openid_new" value="<?php if (isset($_POST['openid_new'])) forum_htmlencode($_POST['openid_new']); ?>" size="25" /></span>
						</div>
						<div class="mf-field text">
							<span class="submit"><input type="submit" name="openid_add" value="<?php echo $lang_openid['Add OpenID']; ?>" /></span>
						</div>
					</div>
				</fieldset>
<?php
foreach ($openid_list as $openid_identifier)
{
?>
				<fieldset class="mf-set mf-extra set<?php echo ++$forum_page['item_count'] ?>">
					<legend><span><?php echo $lang_openid['Existing OpenID']; ?></span></legend>
					<div class="mf-box">
						<div class="mf-field text mf-field1">
							<span class="fld-input"><input type="text" id="fld<?php echo ++$forum_page['fld_count'] ?>" name="openid" value="<?php echo forum_htmlencode($openid_identifier); ?>" size="25" readonly="readonly" /></span>
						</div>
						<div class="mf-field text">
							<span class="submit"><input type="submit" name="openid_remove[<?php echo forum_htmlencode($openid_identifier); ?>]" value="<?php echo $lang_openid['Remove OpenID']; ?>" /></span>
						</div>
					</div>
				</fieldset>
<?php
}
?>
			</fieldset>
		</form>
	</div>
<?php
	$tpl_temp = forum_trim(ob_get_contents());
	$tpl_main = str_replace('<!-- forum_main -->', $tpl_temp, $tpl_main);
	ob_end_clean();
	// END SUBST - <!-- forum_main -->

	require FORUM_ROOT.'footer.php';
}
		]]></hook>


		<!-- register.php -->
		<hook id="rg_start"><![CDATA[
// basic OpenID registration handling
require_once $ext_info['path'].'/include/common.php';

// check for OpenID request and handle it
$openid_handler = new Ext_PunBB_OpenIDHandler(forum_link($forum_url['register']));

if ($openid_handler->getLastError())
{
	message($openid_handler->getLastError());
}

switch ($openid_handler->getRequestStatus())
{
	case Ext_PunBB_OpenIDHandler::REQUEST_STATUS_SUCCESS:
		if ($openid_handler->getUserData()->isKnownUser())
		{
			message(sprintf($lang_openid['Identifier already registered'], $openid_handler->getClaimedIdentifier()));
		}
		else
		{
			// save state in case additional user input is needed
			$openid_handler->saveState();

			if (!isset($_POST['form_sent']))
			{
				$_POST['form_sent'] = '1';
				$_POST['req_username'] = $openid_handler->getUserData()->username;
				$_POST['req_email1'] = $openid_handler->getUserData()->email;
				if ($forum_config['o_regs_verify']) $_POST['req_email2'] = $_POST['req_email1'];
				$_POST['timezone'] = $openid_handler->getUserData()->timezone;
				if ($openid_handler->getUserData()->dst) $_POST['dst'] = '1';
				if (file_exists(FORUM_ROOT.'lang/'.$openid_handler->getUserData()->language.'/common.php'))
				{
					$_POST['language'] = $openid_handler->getUserData()->language;
				}
			}

			// generate random password
			$_POST['req_password1'] = random_key(8, true);
			$_POST['req_password2'] = $_POST['req_password1'];
		}
		break;
	case Ext_PunBB_OpenIDHandler::REQUEST_STATUS_CANCEL:
		$_GET['cancel'] = '1';
		break;
}
		]]></hook>
		<hook id="rg_register_pre_add_user"><![CDATA[
// save additional attributes requested via OpenID extensions
if ($openid_handler->isSuccessRequest())
{
	$user_info += $openid_handler->getUserData()->getData();
	$forum_db->start_transaction();
}
		]]></hook>
		<hook id="rg_register_pre_login_redirect"><![CDATA[
// save OpenID with mapping to new user account
if ($openid_handler->isSuccessRequest())
{
	$openid_query = array(
		'INSERT'	=> 'openid, userid',
		'INTO'		=> 'openid_map',
		'VALUES'	=> '\''.$forum_db->escape($openid_handler->getClaimedIdentifier()).'\', \''.$forum_db->escape($new_uid).'\''
	);
	$forum_db->query_build($openid_query) or error(__FILE__, __LINE__);
	$forum_db->end_transaction();
}
		]]></hook>
		<hook id="rg_register_pre_group"><![CDATA[
// display notice explaining OpenID registration
if (!isset($_POST['form_sent']))
{
?>
			<div class="ct-box info-box">
				<p><?php echo sprintf($lang_openid['OpenID registration'], forum_link($forum_url['login'])); ?></p>
			</div>
<?php
}
		]]></hook>
		<hook id="rg_register_pre_password"><![CDATA[
// hide password fields in form
if ($openid_handler->isSuccessRequest())
{
	$openid_backup_o_regs_verify = $forum_config['o_regs_verify'];
	$forum_config['o_regs_verify'] = '1';
}
		]]></hook>
		<hook id="rg_register_pre_email"><![CDATA[
// restore original value
if (isset($openid_backup_o_regs_verify))
{
	$forum_config['o_regs_verify'] = $openid_backup_o_regs_verify;
}
		]]></hook>
	</hooks>
</extension>
